load_module modules/ngx_http_modsecurity_module.so;

worker_processes auto;
events { worker_connections 1024; }

http {
  sendfile on;
  server_tokens off;

  # Upstream to TonleDB API (TLS-terminating here, adjust as needed)
  upstream tonledb {
    server 127.0.0.1:8443;  # change if your DB/API binds elsewhere
  }

  server {
    listen 8444;                 # public API port (gateway)
    client_max_body_size 1m;     # request size cap
    keepalive_timeout 15;

    # Enable ModSecurity WAF
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsec/main.conf;

    # Basic IP allow-list for admin endpoints (edit CIDRs)
    location ~* ^/admin/ {
    include api/policies/ip-allow.conf;
      allow 10.0.0.0/8;
      allow 192.168.0.0/16;
      deny all;
      proxy_pass https://tonledb;
    }

    # Default API route
    location / {
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_read_timeout 10s;
      proxy_send_timeout 10s;
      proxy_connect_timeout 3s;

      # Security headers (mainly useful for browser clients)
      add_header X-Content-Type-Options nosniff always;
      add_header Referrer-Policy no-referrer always;

      proxy_pass https://tonledb;
    }
  }
}
http {
  # … (rest of file above) …
  limit_req_zone $binary_remote_addr zone=api_rps:10m rate=10r/s;
  limit_conn_zone $binary_remote_addr zone=addr:10m;

  server {
    # … existing server …
    location / {
      limit_req zone=api_rps burst=30 nodelay;   # hard cap
      limit_conn addr 50;                        # concurrent conns per IP
      proxy_pass https://tonledb;
    }
  }
}
map $http_user_agent $bad_ua {
  default 0;
  ~*(curl|nikto|sqlmap|nmap) 1;
}
server {
  # …
  if ($bad_ua) { return 403; }
}
  server {
    # ...
    location ~* ^/(kv|items)/ {
      if ($request_method ~* "(PUT|DELETE)") {
        if ($http_if_match = "") { return 428; } # Precondition Required
      }
      proxy_pass https://tonledb;
    }
  }
  server {
    # ...
    location ~* ^/admin/(restore|rekey|delete)$ {
    include api/policies/ip-allow.conf;
      if ($http_x_approver_1 = "") { return 401; }
      if ($http_x_approver_2 = "") { return 401; }
      proxy_pass https://tonledb;
    }
  }
  server {
    # ...
    location = /admin.php { return 404; }
    location = /wp-login.php { return 404; }
    error_page 404 = @notfound;
    location @notfound {
      add_header X-Tripwire "1" always;
      return 404;
    }
  }
map $http_user_agent $bad_ua {
  default 0;
  ~*(sqlmap|nikto|nmap|dirbuster|crawler) 1;
}
server {
  # ...
  if ($bad_ua) { return 403; }
}
  server {
    # ...
    location / { # your normal proxy rules }
    location / { return 404; }  # catch all at end: deny by default
  }
